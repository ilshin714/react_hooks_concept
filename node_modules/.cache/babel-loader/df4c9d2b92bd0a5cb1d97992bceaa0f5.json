{"ast":null,"code":"var _jsxFileName = \"/Users/ilshin714/Desktop/Programming/React/react-hooks/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer, Fragment, useRef, createContext, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"; //import App from './App';\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FaStar } from \"react-icons/fa\";\nimport { useInput } from \"./useInput\";\nimport { useFetch } from \"./useFetch\"; //import App from \"./App\";\n//// -------------------------------- #1 The concept of destructuring\n// const [first, second]= [\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(first);\n// console.log(second);\n// const [,,third] =[\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(third);\n// // -------------------------------- #2 Incorporating the useState\n// function App() {\n//   const [status, setStatus] = useState(\"Not Delivered\");\n//   return (\n//     <div>\n//       <h1>THe package is: {status}</h1>\n//       <button onClick={() => setStatus(\"Delivered\")}>Deilver</button>\n//     </div>\n//   );\n// }\n// // -------------------------------- #3 Building a checkbox with useStage\n// function App(){\n//   const [checked, setChecked] = useState(false);\n//   return (\n//     <div>\n//       <input\n//         type=\"checkbox\"\n//         value={checked}\n//         onChange={() =>\n//           setChecked((checked) => !checked)}\n//         />\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </div>\n//   )\n// }\n// // // -------------------------------- #4 Building a checkbox with useStage\n// const createArray = (length) => [\n//   ...Array(length)\n// ];\n// function Star({selected = false, onSelect}){\n//   return <FaStar color={selected ? \"red\" : \"gray\"}\n//     onClick={onSelect}\n//   />;\n// }\n// function StarRating({totalStars = 5}){\n//   const [\n//     selectedStarts,\n//     setSelectedStars\n//   ] = useState(0);\n//   return <>\n//   {createArray(totalStars).map((n,i) => (\n//       <Star key={i} selected ={selectedStarts > i} onSelect={() => setSelectedStars(i+1)}/>\n//     )\n//   )}\n//   <p>{selectedStarts} of {totalStars}</p>\n//   </>\n// }\n// function App(){\n//   return <StarRating totalStars={10}/>\n// }\n// // -------------------------------- #4 Introducing useEffect , Working with dependency array\n// function App(){\n//   const [name, setName] = useState(\"Ilshin\");\n//   const [admin, setAdmin] = useState(false);\n//   useEffect(() =>{\n//     document.title = `Celebreate ${name}`;\n//     console.log(`Celeberate ${name}`);\n//   }, [name]);\n//   useEffect(()=>{\n//     console.log(`The user is: ${admin ? \"admin\" : \"not admin\"}`);\n//   },[admin])\n//   return(\n//     <section>\n//       <p>Congratulations {name}!</p>\n//       <button onClick={()=> setName(\"Shinny\")}>Change the winner</button>\n//       <p>{admin? \"Loogged in\" : \"not logged in\"}</p>\n//       <button onClick={() => setAdmin((admin) =>!admin)}>Login</button>\n//     </section>\n//   )\n// }\n// // -------------------------------- #5 Fetching data with useEffect\n// function App(){\n//   const [data, setData] = useState([]);\n//   useEffect(()=>{\n//     fetch(`https://api.github.com/users`)\n//     .then(response => response.json())\n//     .then(setData);\n//   },[]);\n//   if(data) {\n//     return (\n//       <div>\n//       <ul>\n//         {data.map((user) => (\n//           <li key={user.id}>{user.login}</li>\n//         ))}\n//       </ul>\n//       <button onClick={() => setData([])}>Remove Data</button>\n//       </div>\n//     )\n//   }\n//   return <p>No users</p>\n// }\n// // -------------------------------- #6 Handling complex state with useReducer\n// function App(){\n//   const [number, setNumber] = useReducer((number, newNumber)=> number + newNumber, 0)\n//   return <h1 onClick = {()=> setNumber(1)}>\n//    {number}\n//   </h1>\n// }\n// // // -------------------------------- #7 Refactoring useState to useReducer\n// function App(){\n//   const [checked, toggle] = useReducer(\n//     (checked) => !checked, false\n//   );\n//   return (\n//     <Fragment>\n//       <input\n//         type=\"checkbox\"\n//         value={checked}\n//         onChange={toggle}\n//         />\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </Fragment>\n//   )\n// }\n// // // -------------------------------- #8 dispatching actions with useReducer\n// const initialState = {\n//   message: \"Hi\"\n// }\n// function reducer(state, action){\n//   //state.message == \"Hi\"? state.message=\"Hi\": state.message=\"Hi\"\n//   switch(action.type){\n//     case \"yell\":\n//       return{\n//         message : `HEY!! I JUST SAID ${state.message}`\n//       };\n//     case \"whisper\":\n//       return{\n//         message: `Excuse me I just said ${state.message}`\n//       };\n//     default:\n//       return {\n//         message: \"Say something\"\n//       };\n//   };\n// };\n// function App(){\n//   const [state, dispatch] = useReducer(\n//     reducer,\n//     initialState\n//   );\n//   return (\n//     <Fragment>\n//       <p>Message: {state.message}</p>\n//       <button onClick={() => dispatch({type: \"yell\"})}>YELL</button>\n//       <button onClick={() => dispatch({type: \"whisper\"})}>WHISPER</button>\n//     </Fragment>\n//   )\n// }\n// // -------------------------------- #9 Managing from inputs with useRef\n// function App(){\n//   const sound = useRef();\n//   const color = useRef();\n//   const submit = (e) =>{\n//     e.preventDefault();\n//     const soundVal = sound.current.value;\n//     const colorVal = color.current.value;\n//     alert(`${soundVal} sounds like ${colorVal}`);\n//     sound.current.value=\"\";\n//     color.current.value=\"\";\n//   }\n//   return(\n//     <form onSubmit={submit}>\n//       <input\n//         ref={sound}\n//         type=\"text\"\n//         placeholder=\"sound...\"/>\n//       <input\n//         ref={color}\n//         type=\"color\"/>\n//       <button>ADD</button>\n//     </form>\n//   )\n// }\n// // -------------------------------- #10 Creating controlled components with useState\n// function App() {\n//   const [sound, setSound] = useState(\"\");\n//   const [color, setColor] = useState(\"#00000\");\n//   const submit = (e) => {\n//     e.preventDefault();\n//     alert(`${sound} sounds like ${color}`);\n//     setSound(\"\");\n//     setColor(\"#000000\");\n//   };\n//   return (\n//     <form onSubmit={submit}>\n//       <input\n//         value={sound}\n//         type=\"text\"\n//         placeholder=\"sound...\"\n//         onChange={(e) => setSound(e.target.value)}\n//       />\n//       <input\n//         value={color}\n//         type=\"color\"\n//         onChange={(e) => setColor(e.target.value)}\n//       />\n//       <button>ADD</button>\n//     </form>\n//   );\n// }\n// // -------------------------------- #11 reusing form logic with custom Hooks \n// function App() {\n//   const [titleProps, resetTitle] = useInput(\"\");\n//   const [colorProps, resetColor] = useInput(\"#00000\");\n//   const submit = (e) => {\n//     e.preventDefault();\n//     alert(`${titleProps.value} sounds like ${colorProps.value}`);\n//     resetTitle();\n//     resetColor();\n//   };\n//   return (\n//     <form onSubmit={submit}>\n//       <input\n//         {...titleProps}\n//         type=\"text\"\n//         placeholder=\"sound...\"\n//       />\n//       <input\n//         {...colorProps }\n//         type=\"color\"\n//       />\n//       <button>ADD</button>\n//     </form>\n//   );\n// }\n// // -------------------------------- #12 Placing data in context and Retrieving dta with useContext\n// we have to coomment out ReactDOM.render here for this example\n// export const TreesContext = createContext();\n// const trees = [\n//   {id: \"1\", type: \"Maple\"},\n//   {id: \"2\", type: \"Oak\"},\n//   {id: \"3\", type: \"Family\"},\n//   {id: \"4\", type: \"Component\"}\n// ];\n// ReactDOM.render(\n//     <TreesContext.Provider value={{trees}}>\n//       <App />\n//     </TreesContext.Provider>,\n//     document.getElementById(\"root\")\n//   );\n//We have to go to App.js\n//// ReactDOM.render(\n////   <React.StrictMode>\n//////     <App />\n////   </React.StrictMode>,\n////   document.getElementById(\"root\")\n//// );\n// // -------------------------------- #13 Creating a custom Hook with context\n// const TreesContext = createContext();\n// export const useTrees = () => useContext(TreesContext);\n// const trees = [\n//   {id: \"1\", type: \"Maple\"},\n//   {id: \"2\", type: \"Oak\"},\n//   {id: \"3\", type: \"Family\"},\n//   {id: \"4\", type: \"Component\"}\n// ];\n//// ReactDOM.render(\n////   <React.StrictMode>\n//////     <App />\n////   </React.StrictMode>,\n////   document.getElementById(\"root\")\n//// );\n// ////We have to go to App.js\n// // -------------------------------- #14 Data fetching with a Fetch Hooks \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App({\n  login\n}) {\n  _s();\n\n  const {\n    loading,\n    data,\n    error\n  } = useFetch(`https://api.gihub.com/users/${login}`);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"loading....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 22\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: JSON.stringify(error, null, 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 340,\n    columnNumber: 20\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: JSON.stringify(error, null, 2)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jlpeQfBUWdu3x2tMVw2u+8Prufw=\", false, function () {\n  return [useFetch];\n});\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 350,\n  columnNumber: 5\n}, this), document.getElementById(\"root\")); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ilshin714/Desktop/Programming/React/react-hooks/src/index.js"],"names":["React","useEffect","useState","useReducer","Fragment","useRef","createContext","useContext","ReactDOM","reportWebVitals","FaStar","useInput","useFetch","App","login","loading","data","error","JSON","stringify","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,SADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,aANF,EAOEC,UAPF,QAQO,OARP;AASA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,QAAR,QAAuB,YAAva;AAACC,EAAAA;AAAD,CAAb,EAAqB;AAAA;;AACnB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAAyBL,QAAQ,CAAE,+BAA8BE,KAAM,EAAtC,CAAvC;AACA,MAAGC,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,MAAGE,KAAH,EAAU,oBAAO;AAAA,cAAMC,IAAI,CAACC,SAAL,CAAeF,KAAf,EAAsB,IAAtB,EAA4B,CAA5B;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACV,sBACE;AAAA,cAAMC,IAAI,CAACC,SAAL,CAAeF,KAAf,EAAsB,IAAtB,EAA4B,CAA5B;AAAN;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAPQJ,G;UACwBD,Q;;;KADxBC,G;AAWTL,QAAQ,CAACY,MAAT,eAEI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHF,E,CAOA;AACA;AACA;;AACAb,eAAe","sourcesContent":["import React, {\n  useEffect,\n  useState,\n  useReducer,\n  Fragment,\n  useRef,\n  createContext,\n  useContext\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from './App';\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FaStar } from \"react-icons/fa\";\nimport {useInput} from \"./useInput\";\nimport {useFetch} from \"./useFetch\";\n//import App from \"./App\";\n\n//// -------------------------------- #1 The concept of destructuring\n// const [first, second]= [\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(first);\n// console.log(second);\n// const [,,third] =[\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(third);\n\n// // -------------------------------- #2 Incorporating the useState\n// function App() {\n//   const [status, setStatus] = useState(\"Not Delivered\");\n\n//   return (\n//     <div>\n//       <h1>THe package is: {status}</h1>\n//       <button onClick={() => setStatus(\"Delivered\")}>Deilver</button>\n//     </div>\n//   );\n// }\n\n// // -------------------------------- #3 Building a checkbox with useStage\n// function App(){\n//   const [checked, setChecked] = useState(false);\n//   return (\n//     <div>\n//       <input\n//         type=\"checkbox\"\n//         value={checked}\n//         onChange={() =>\n//           setChecked((checked) => !checked)}\n//         />\n\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </div>\n//   )\n// }\n\n// // // -------------------------------- #4 Building a checkbox with useStage\n// const createArray = (length) => [\n//   ...Array(length)\n// ];\n\n// function Star({selected = false, onSelect}){\n//   return <FaStar color={selected ? \"red\" : \"gray\"}\n//     onClick={onSelect}\n//   />;\n// }\n\n// function StarRating({totalStars = 5}){\n//   const [\n//     selectedStarts,\n//     setSelectedStars\n//   ] = useState(0);\n\n//   return <>\n//   {createArray(totalStars).map((n,i) => (\n//       <Star key={i} selected ={selectedStarts > i} onSelect={() => setSelectedStars(i+1)}/>\n//     )\n//   )}\n//   <p>{selectedStarts} of {totalStars}</p>\n\n//   </>\n// }\n\n// function App(){\n//   return <StarRating totalStars={10}/>\n// }\n\n// // -------------------------------- #4 Introducing useEffect , Working with dependency array\n// function App(){\n//   const [name, setName] = useState(\"Ilshin\");\n//   const [admin, setAdmin] = useState(false);\n//   useEffect(() =>{\n//     document.title = `Celebreate ${name}`;\n//     console.log(`Celeberate ${name}`);\n//   }, [name]);\n\n//   useEffect(()=>{\n//     console.log(`The user is: ${admin ? \"admin\" : \"not admin\"}`);\n//   },[admin])\n\n//   return(\n//     <section>\n//       <p>Congratulations {name}!</p>\n//       <button onClick={()=> setName(\"Shinny\")}>Change the winner</button>\n//       <p>{admin? \"Loogged in\" : \"not logged in\"}</p>\n//       <button onClick={() => setAdmin((admin) =>!admin)}>Login</button>\n//     </section>\n//   )\n// }\n\n// // -------------------------------- #5 Fetching data with useEffect\n// function App(){\n//   const [data, setData] = useState([]);\n//   useEffect(()=>{\n//     fetch(`https://api.github.com/users`)\n//     .then(response => response.json())\n//     .then(setData);\n//   },[]);\n\n//   if(data) {\n//     return (\n//       <div>\n//       <ul>\n//         {data.map((user) => (\n//           <li key={user.id}>{user.login}</li>\n//         ))}\n//       </ul>\n//       <button onClick={() => setData([])}>Remove Data</button>\n//       </div>\n//     )\n//   }\n\n//   return <p>No users</p>\n\n// }\n\n// // -------------------------------- #6 Handling complex state with useReducer\n\n// function App(){\n//   const [number, setNumber] = useReducer((number, newNumber)=> number + newNumber, 0)\n//   return <h1 onClick = {()=> setNumber(1)}>\n//    {number}\n//   </h1>\n// }\n\n// // // -------------------------------- #7 Refactoring useState to useReducer\n// function App(){\n//   const [checked, toggle] = useReducer(\n//     (checked) => !checked, false\n//   );\n//   return (\n//     <Fragment>\n//       <input\n//         type=\"checkbox\"\n//         value={checked}\n//         onChange={toggle}\n//         />\n\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </Fragment>\n//   )\n// }\n\n// // // -------------------------------- #8 dispatching actions with useReducer\n// const initialState = {\n//   message: \"Hi\"\n// }\n\n// function reducer(state, action){\n//   //state.message == \"Hi\"? state.message=\"Hi\": state.message=\"Hi\"\n//   switch(action.type){\n\n//     case \"yell\":\n//       return{\n//         message : `HEY!! I JUST SAID ${state.message}`\n//       };\n//     case \"whisper\":\n//       return{\n//         message: `Excuse me I just said ${state.message}`\n//       };\n//     default:\n//       return {\n//         message: \"Say something\"\n//       };\n//   };\n// };\n\n// function App(){\n//   const [state, dispatch] = useReducer(\n//     reducer,\n//     initialState\n//   );\n\n//   return (\n//     <Fragment>\n//       <p>Message: {state.message}</p>\n//       <button onClick={() => dispatch({type: \"yell\"})}>YELL</button>\n//       <button onClick={() => dispatch({type: \"whisper\"})}>WHISPER</button>\n//     </Fragment>\n//   )\n// }\n\n// // -------------------------------- #9 Managing from inputs with useRef\n// function App(){\n//   const sound = useRef();\n//   const color = useRef();\n\n//   const submit = (e) =>{\n//     e.preventDefault();\n//     const soundVal = sound.current.value;\n//     const colorVal = color.current.value;\n//     alert(`${soundVal} sounds like ${colorVal}`);\n//     sound.current.value=\"\";\n//     color.current.value=\"\";\n//   }\n//   return(\n//     <form onSubmit={submit}>\n//       <input\n//         ref={sound}\n//         type=\"text\"\n//         placeholder=\"sound...\"/>\n//       <input\n//         ref={color}\n//         type=\"color\"/>\n//       <button>ADD</button>\n//     </form>\n//   )\n// }\n\n// // -------------------------------- #10 Creating controlled components with useState\n// function App() {\n//   const [sound, setSound] = useState(\"\");\n//   const [color, setColor] = useState(\"#00000\");\n\n//   const submit = (e) => {\n//     e.preventDefault();\n//     alert(`${sound} sounds like ${color}`);\n//     setSound(\"\");\n//     setColor(\"#000000\");\n//   };\n\n//   return (\n//     <form onSubmit={submit}>\n//       <input\n//         value={sound}\n//         type=\"text\"\n//         placeholder=\"sound...\"\n//         onChange={(e) => setSound(e.target.value)}\n//       />\n//       <input\n//         value={color}\n//         type=\"color\"\n//         onChange={(e) => setColor(e.target.value)}\n//       />\n//       <button>ADD</button>\n//     </form>\n//   );\n// }\n\n// // -------------------------------- #11 reusing form logic with custom Hooks \n// function App() {\n//   const [titleProps, resetTitle] = useInput(\"\");\n//   const [colorProps, resetColor] = useInput(\"#00000\");\n\n//   const submit = (e) => {\n//     e.preventDefault();\n//     alert(`${titleProps.value} sounds like ${colorProps.value}`);\n//     resetTitle();\n//     resetColor();\n//   };\n\n//   return (\n//     <form onSubmit={submit}>\n//       <input\n//         {...titleProps}\n//         type=\"text\"\n//         placeholder=\"sound...\"\n//       />\n//       <input\n//         {...colorProps }\n//         type=\"color\"\n\n//       />\n//       <button>ADD</button>\n//     </form>\n//   );\n// }\n\n// // -------------------------------- #12 Placing data in context and Retrieving dta with useContext\n// we have to coomment out ReactDOM.render here for this example\n// export const TreesContext = createContext();\n\n// const trees = [\n//   {id: \"1\", type: \"Maple\"},\n//   {id: \"2\", type: \"Oak\"},\n//   {id: \"3\", type: \"Family\"},\n//   {id: \"4\", type: \"Component\"}\n// ];\n\n\n\n  // ReactDOM.render(\n  //     <TreesContext.Provider value={{trees}}>\n  //       <App />\n  //     </TreesContext.Provider>,\n  //     document.getElementById(\"root\")\n  //   );\n//We have to go to App.js\n\n//// ReactDOM.render(\n////   <React.StrictMode>\n//////     <App />\n////   </React.StrictMode>,\n////   document.getElementById(\"root\")\n//// );\n\n\n// // -------------------------------- #13 Creating a custom Hook with context\n// const TreesContext = createContext();\n// export const useTrees = () => useContext(TreesContext);\n\n// const trees = [\n//   {id: \"1\", type: \"Maple\"},\n//   {id: \"2\", type: \"Oak\"},\n//   {id: \"3\", type: \"Family\"},\n//   {id: \"4\", type: \"Component\"}\n// ];\n\n//// ReactDOM.render(\n////   <React.StrictMode>\n//////     <App />\n////   </React.StrictMode>,\n////   document.getElementById(\"root\")\n//// );\n// ////We have to go to App.js\n\n// // -------------------------------- #14 Data fetching with a Fetch Hooks \n\nfunction App({login}){\n  const {loading, data, error} = useFetch(`https://api.gihub.com/users/${login}`);\n  if(loading) return <h1>loading....</h1>\n  if(error) return <pre>{JSON.stringify(error, null, 2)}</pre>\n  return (\n    <pre>{JSON.stringify(error, null, 2)}</pre>\n  )\n}\n\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById(\"root\")\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}