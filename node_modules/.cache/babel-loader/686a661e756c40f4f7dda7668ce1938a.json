{"ast":null,"code":"var _jsxFileName = \"/Users/ilshin714/Desktop/Programming/React/react-hooks/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"; //import App from './App';\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FaStar } from \"react-icons/fa\"; //// -------------------------------- #1 The concept of destructuring\n// const [first, second]= [\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(first);\n// console.log(second);\n// const [,,third] =[\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(third);\n// // -------------------------------- #2 Incorporating the useState\n// function App() {\n//   const [status, setStatus] = useState(\"Not Delivered\");\n//   return (\n//     <div>\n//       <h1>THe package is: {status}</h1>\n//       <button onClick={() => setStatus(\"Delivered\")}>Deilver</button>    \n//     </div>\n//   );\n// }\n// // -------------------------------- #3 Building a checkbox with useStage\n// function App(){\n//   const [checked, setChecked] = useState(false);\n//   return (\n//     <div>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={() => \n//           setChecked((checked) => !checked)}\n//         />\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </div>\n//   )\n// }\n// // // -------------------------------- #4 Building a checkbox with useStage\n// const createArray = (length) => [\n//   ...Array(length)\n// ];\n// function Star({selected = false, onSelect}){\n//   return <FaStar color={selected ? \"red\" : \"gray\"}\n//     onClick={onSelect}\n//   />;\n// }\n// function StarRating({totalStars = 5}){ \n//   const [\n//     selectedStarts, \n//     setSelectedStars\n//   ] = useState(0);\n//   return <>\n//   {createArray(totalStars).map((n,i) => (\n//       <Star key={i} selected ={selectedStarts > i} onSelect={() => setSelectedStars(i+1)}/>\n//     )\n//   )}\n//   <p>{selectedStarts} of {totalStars}</p>\n//   </>\n// }\n// function App(){\n//   return <StarRating totalStars={10}/>\n// }\n// // -------------------------------- #4 Introducing useEffect , Working with dependency array \n// function App(){\n//   const [name, setName] = useState(\"Ilshin\");\n//   const [admin, setAdmin] = useState(false);\n//   useEffect(() =>{\n//     document.title = `Celebreate ${name}`;\n//     console.log(`Celeberate ${name}`);\n//   }, [name]);\n//   useEffect(()=>{\n//     console.log(`The user is: ${admin ? \"admin\" : \"not admin\"}`);\n//   },[admin])\n//   return(\n//     <section>\n//       <p>Congratulations {name}!</p>\n//       <button onClick={()=> setName(\"Shinny\")}>Change the winner</button>\n//       <p>{admin? \"Loogged in\" : \"not logged in\"}</p>\n//       <button onClick={() => setAdmin((admin) =>!admin)}>Login</button>\n//     </section>\n//   )\n// }\n// // -------------------------------- #5 Fetching data with useEffect \n// function App(){\n//   const [data, setData] = useState([]);\n//   useEffect(()=>{\n//     fetch(`https://api.github.com/users`)\n//     .then(response => response.json())\n//     .then(setData);\n//   },[]);\n//   if(data) {\n//     return (\n//       <div>\n//       <ul>\n//         {data.map((user) => (\n//           <li key={user.id}>{user.login}</li>\n//         ))}\n//       </ul>\n//       <button onClick={() => setData([])}>Remove Data</button>\n//       </div>\n//     )\n//   }\n//   return <p>No users</p>\n// }\n// // -------------------------------- #6 Handling complex state with useReducer\n// function App(){\n//   const [number, setNumber] = useReducer((number, newNumber)=> number + newNumber, 0)\n//   return <h1 onClick = {()=> setNumber(1)}>\n//    {number}\n//   </h1>\n// }\n// // // -------------------------------- #7 Refactoring useState to useReducer\n// function App(){\n//   const [checked, toggle] = useReducer(\n//     (checked) => !checked, false\n//   );\n//   return (\n//     <Fragment>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={toggle}\n//         />\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </Fragment>\n//   )\n// }\n// // // -------------------------------- #8 dispatching actions with useReducer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  message: \"Hi\"\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"yell\":\n      return {\n        message: \"HEY!!\"\n      };\n\n    case \"whisper\":\n      return {\n        message: \"Excuse me\"\n      };\n\n    default:\n      return {\n        message: \"Say something\"\n      };\n  }\n\n  ;\n}\n\nfunction App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Message: \", state.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 191,\n  columnNumber: 3\n}, this), document.getElementById(\"root\")); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ilshin714/Desktop/Programming/React/react-hooks/src/index.js"],"names":["React","useEffect","useState","useReducer","Fragment","ReactDOM","reportWebVitals","FaStar","initialState","message","reducer","state","action","type","App","dispatch","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,MAAR,QAAqB,gBAArnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC7B,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,MAAL;AACE,aAAM;AACJJ,QAAAA,OAAO,EAAG;AADN,OAAN;;AAGF,SAAK,SAAL;AACE,aAAM;AACJA,QAAAA,OAAO,EAAE;AADL,OAAN;;AAGF;AACE,aAAO;AACLA,QAAAA,OAAO,EAAE;AADJ,OAAP;AAVJ;;AAaC;AACF;;AAED,SAASK,GAAT,GAAc;AAAA;;AACZ,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBZ,UAAU,CAClCO,OADkC,EAElCF,YAFkC,CAApC;AAKA,sBACE,QAAC,QAAD;AAAA,2BACE;AAAA,8BAAaG,KAAK,CAACF,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAXQK,G;;KAAAA,G;AAcTT,QAAQ,CAACW,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAZ,eAAe","sourcesContent":["import React, { useEffect, useState, useReducer, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from './App';\nimport reportWebVitals from \"./reportWebVitals\";\nimport {FaStar} from \"react-icons/fa\"; \n\n\n//// -------------------------------- #1 The concept of destructuring\n// const [first, second]= [\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(first);\n// console.log(second);\n// const [,,third] =[\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(third);\n\n// // -------------------------------- #2 Incorporating the useState\n// function App() {\n//   const [status, setStatus] = useState(\"Not Delivered\");\n\n//   return (\n//     <div>\n//       <h1>THe package is: {status}</h1>\n//       <button onClick={() => setStatus(\"Delivered\")}>Deilver</button>    \n//     </div>\n//   );\n// }\n\n\n// // -------------------------------- #3 Building a checkbox with useStage\n// function App(){\n//   const [checked, setChecked] = useState(false);\n//   return (\n//     <div>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={() => \n//           setChecked((checked) => !checked)}\n//         />\n\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </div>\n//   )\n// }\n\n// // // -------------------------------- #4 Building a checkbox with useStage\n// const createArray = (length) => [\n//   ...Array(length)\n// ];\n\n// function Star({selected = false, onSelect}){\n//   return <FaStar color={selected ? \"red\" : \"gray\"}\n//     onClick={onSelect}\n//   />;\n// }\n\n// function StarRating({totalStars = 5}){ \n//   const [\n//     selectedStarts, \n//     setSelectedStars\n//   ] = useState(0);\n\n//   return <>\n//   {createArray(totalStars).map((n,i) => (\n//       <Star key={i} selected ={selectedStarts > i} onSelect={() => setSelectedStars(i+1)}/>\n//     )\n//   )}\n//   <p>{selectedStarts} of {totalStars}</p>\n\n//   </>\n// }\n\n// function App(){\n//   return <StarRating totalStars={10}/>\n// }\n\n// // -------------------------------- #4 Introducing useEffect , Working with dependency array \n// function App(){\n//   const [name, setName] = useState(\"Ilshin\");\n//   const [admin, setAdmin] = useState(false);\n//   useEffect(() =>{\n//     document.title = `Celebreate ${name}`;\n//     console.log(`Celeberate ${name}`);\n//   }, [name]);\n\n//   useEffect(()=>{\n//     console.log(`The user is: ${admin ? \"admin\" : \"not admin\"}`);\n//   },[admin])\n\n//   return(\n//     <section>\n//       <p>Congratulations {name}!</p>\n//       <button onClick={()=> setName(\"Shinny\")}>Change the winner</button>\n//       <p>{admin? \"Loogged in\" : \"not logged in\"}</p>\n//       <button onClick={() => setAdmin((admin) =>!admin)}>Login</button>\n//     </section>\n//   )\n// }\n\n// // -------------------------------- #5 Fetching data with useEffect \n// function App(){\n//   const [data, setData] = useState([]);\n//   useEffect(()=>{\n//     fetch(`https://api.github.com/users`)\n//     .then(response => response.json())\n//     .then(setData);\n//   },[]);\n\n//   if(data) {\n//     return (\n//       <div>\n//       <ul>\n//         {data.map((user) => (\n//           <li key={user.id}>{user.login}</li>\n//         ))}\n//       </ul>\n//       <button onClick={() => setData([])}>Remove Data</button>\n//       </div>\n//     )\n//   }\n\n//   return <p>No users</p>\n\n// }\n\n// // -------------------------------- #6 Handling complex state with useReducer\n\n// function App(){\n//   const [number, setNumber] = useReducer((number, newNumber)=> number + newNumber, 0)\n//   return <h1 onClick = {()=> setNumber(1)}>\n//    {number}\n//   </h1>\n// }\n\n\n// // // -------------------------------- #7 Refactoring useState to useReducer\n// function App(){\n//   const [checked, toggle] = useReducer(\n//     (checked) => !checked, false\n//   );\n//   return (\n//     <Fragment>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={toggle}\n//         />\n\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </Fragment>\n//   )\n// }\n\n// // // -------------------------------- #8 dispatching actions with useReducer\nconst initialState = {\n  message: \"Hi\"\n}\n\nfunction reducer(state, action){\n  switch(action.type){\n    case \"yell\":\n      return{\n        message : \"HEY!!\"\n      };\n    case \"whisper\":\n      return{\n        message: \"Excuse me\"\n      };\n    default:\n      return {\n        message: \"Say something\"\n      };\n  };\n}\n\nfunction App(){\n  const [state, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  return (\n    <Fragment>\n      <p>Message: {state.message}</p>\n    </Fragment>\n  )\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}