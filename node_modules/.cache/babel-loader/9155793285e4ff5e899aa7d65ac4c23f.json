{"ast":null,"code":"var _jsxFileName = \"/Users/ilshin714/Desktop/Programming/React/react-hooks/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useReducer, Fragment, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\"; //import App from './App';\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FaStar } from \"react-icons/fa\"; //// -------------------------------- #1 The concept of destructuring\n// const [first, second]= [\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(first);\n// console.log(second);\n// const [,,third] =[\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(third);\n// // -------------------------------- #2 Incorporating the useState\n// function App() {\n//   const [status, setStatus] = useState(\"Not Delivered\");\n//   return (\n//     <div>\n//       <h1>THe package is: {status}</h1>\n//       <button onClick={() => setStatus(\"Delivered\")}>Deilver</button>    \n//     </div>\n//   );\n// }\n// // -------------------------------- #3 Building a checkbox with useStage\n// function App(){\n//   const [checked, setChecked] = useState(false);\n//   return (\n//     <div>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={() => \n//           setChecked((checked) => !checked)}\n//         />\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </div>\n//   )\n// }\n// // // -------------------------------- #4 Building a checkbox with useStage\n// const createArray = (length) => [\n//   ...Array(length)\n// ];\n// function Star({selected = false, onSelect}){\n//   return <FaStar color={selected ? \"red\" : \"gray\"}\n//     onClick={onSelect}\n//   />;\n// }\n// function StarRating({totalStars = 5}){ \n//   const [\n//     selectedStarts, \n//     setSelectedStars\n//   ] = useState(0);\n//   return <>\n//   {createArray(totalStars).map((n,i) => (\n//       <Star key={i} selected ={selectedStarts > i} onSelect={() => setSelectedStars(i+1)}/>\n//     )\n//   )}\n//   <p>{selectedStarts} of {totalStars}</p>\n//   </>\n// }\n// function App(){\n//   return <StarRating totalStars={10}/>\n// }\n// // -------------------------------- #4 Introducing useEffect , Working with dependency array \n// function App(){\n//   const [name, setName] = useState(\"Ilshin\");\n//   const [admin, setAdmin] = useState(false);\n//   useEffect(() =>{\n//     document.title = `Celebreate ${name}`;\n//     console.log(`Celeberate ${name}`);\n//   }, [name]);\n//   useEffect(()=>{\n//     console.log(`The user is: ${admin ? \"admin\" : \"not admin\"}`);\n//   },[admin])\n//   return(\n//     <section>\n//       <p>Congratulations {name}!</p>\n//       <button onClick={()=> setName(\"Shinny\")}>Change the winner</button>\n//       <p>{admin? \"Loogged in\" : \"not logged in\"}</p>\n//       <button onClick={() => setAdmin((admin) =>!admin)}>Login</button>\n//     </section>\n//   )\n// }\n// // -------------------------------- #5 Fetching data with useEffect \n// function App(){\n//   const [data, setData] = useState([]);\n//   useEffect(()=>{\n//     fetch(`https://api.github.com/users`)\n//     .then(response => response.json())\n//     .then(setData);\n//   },[]);\n//   if(data) {\n//     return (\n//       <div>\n//       <ul>\n//         {data.map((user) => (\n//           <li key={user.id}>{user.login}</li>\n//         ))}\n//       </ul>\n//       <button onClick={() => setData([])}>Remove Data</button>\n//       </div>\n//     )\n//   }\n//   return <p>No users</p>\n// }\n// // -------------------------------- #6 Handling complex state with useReducer\n// function App(){\n//   const [number, setNumber] = useReducer((number, newNumber)=> number + newNumber, 0)\n//   return <h1 onClick = {()=> setNumber(1)}>\n//    {number}\n//   </h1>\n// }\n// // // -------------------------------- #7 Refactoring useState to useReducer\n// function App(){\n//   const [checked, toggle] = useReducer(\n//     (checked) => !checked, false\n//   );\n//   return (\n//     <Fragment>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={toggle}\n//         />\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </Fragment>\n//   )\n// }\n// // // -------------------------------- #8 dispatching actions with useReducer\n// const initialState = {\n//   message: \"Hi\"\n// }\n// function reducer(state, action){\n//   //state.message == \"Hi\"? state.message=\"Hi\": state.message=\"Hi\"\n//   switch(action.type){\n//     case \"yell\":\n//       return{\n//         message : `HEY!! I JUST SAID ${state.message}`\n//       };\n//     case \"whisper\":\n//       return{\n//         message: `Excuse me I just said ${state.message}`\n//       };\n//     default:\n//       return {\n//         message: \"Say something\"\n//       };\n//   };\n// };\n// function App(){\n//   const [state, dispatch] = useReducer(\n//     reducer,\n//     initialState\n//   );\n//   return (\n//     <Fragment>\n//       <p>Message: {state.message}</p>\n//       <button onClick={() => dispatch({type: \"yell\"})}>YELL</button>\n//       <button onClick={() => dispatch({type: \"whisper\"})}>WHISPER</button>\n//     </Fragment>\n//   )\n// }\n// // -------------------------------- #9 Managing from inputs with useRef\n// function App(){\n//   const sound = useRef();\n//   const color = useRef();\n//   const submit = (e) =>{\n//     e.preventDefault();\n//     const soundVal = sound.current.value;\n//     const colorVal = color.current.value;\n//     alert(`${soundVal} sounds like ${colorVal}`);\n//     sound.current.value=\"\";\n//     color.current.value=\"\";\n//   }\n//   return(\n//     <form onSubmit={submit}>\n//       <input \n//         ref={sound}\n//         type=\"text\" \n//         placeholder=\"sound...\"/>\n//       <input \n//         ref={color}\n//         type=\"color\"/>\n//       <button>ADD</button>\n//     </form>\n//   )\n// }\n// // -------------------------------- #10 Creating controlled components with useState\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [sound, setSound] = useState(\"\");\n  const [color, setColor] = useState(\"#00000\");\n\n  const submit = e => {\n    e.preventDefault();\n    const soundVal = sound.current.value;\n    const colorVal = color.current.value;\n    alert(`${soundVal} sounds like ${colorVal}`);\n    sound.current.value = \"\";\n    color.current.value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: sound,\n      type: \"text\",\n      placeholder: \"sound...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: color,\n      type: \"color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"ADD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ES4piqczU5l5fsIYheIAzPecEeE=\");\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 249,\n  columnNumber: 3\n}, this), document.getElementById(\"root\")); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ilshin714/Desktop/Programming/React/react-hooks/src/index.js"],"names":["React","useEffect","useState","useReducer","Fragment","useRef","ReactDOM","reportWebVitals","FaStar","App","sound","setSound","color","setColor","submit","e","preventDefault","soundVal","current","value","colorVal","alert","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,QAAjD,EAA2DC,MAA3D,QAAyE,OAAzE;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CACA;;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,MAAR,QAAqB,gBAArc;AAAA;;AACZ,QAAK,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAK,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,QAAD,CAAjC;;AAEA,QAAMY,MAAM,GAAIC,CAAD,IAAM;AACnBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAGP,KAAK,CAACQ,OAAN,CAAcC,KAA/B;AACA,UAAMC,QAAQ,GAAGR,KAAK,CAACM,OAAN,CAAcC,KAA/B;AACAE,IAAAA,KAAK,CAAE,GAAEJ,QAAS,gBAAeG,QAAS,EAArC,CAAL;AACAV,IAAAA,KAAK,CAACQ,OAAN,CAAcC,KAAd,GAAoB,EAApB;AACAP,IAAAA,KAAK,CAACM,OAAN,CAAcC,KAAd,GAAoB,EAApB;AACD,GAPD;;AAQA,sBACE;AAAM,IAAA,QAAQ,EAAEL,MAAhB;AAAA,4BACE;AACE,MAAA,KAAK,EAAGJ,KADV;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AACE,MAAA,GAAG,EAAEE,KADP;AAEE,MAAA,IAAI,EAAC;AAFP;AAAA;AAAA;AAAA;AAAA,YALF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAxBQH,G;;KAAAA,G;AA2BTH,QAAQ,CAACgB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAjB,eAAe","sourcesContent":["import React, { useEffect, useState, useReducer, Fragment, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from './App';\nimport reportWebVitals from \"./reportWebVitals\";\nimport {FaStar} from \"react-icons/fa\"; \n\n\n//// -------------------------------- #1 The concept of destructuring\n// const [first, second]= [\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(first);\n// console.log(second);\n// const [,,third] =[\"Keum Ji Kim\", \"David Shin\", \"Sandy Park\"];\n// console.log(third);\n\n// // -------------------------------- #2 Incorporating the useState\n// function App() {\n//   const [status, setStatus] = useState(\"Not Delivered\");\n\n//   return (\n//     <div>\n//       <h1>THe package is: {status}</h1>\n//       <button onClick={() => setStatus(\"Delivered\")}>Deilver</button>    \n//     </div>\n//   );\n// }\n\n\n// // -------------------------------- #3 Building a checkbox with useStage\n// function App(){\n//   const [checked, setChecked] = useState(false);\n//   return (\n//     <div>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={() => \n//           setChecked((checked) => !checked)}\n//         />\n\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </div>\n//   )\n// }\n\n// // // -------------------------------- #4 Building a checkbox with useStage\n// const createArray = (length) => [\n//   ...Array(length)\n// ];\n\n// function Star({selected = false, onSelect}){\n//   return <FaStar color={selected ? \"red\" : \"gray\"}\n//     onClick={onSelect}\n//   />;\n// }\n\n// function StarRating({totalStars = 5}){ \n//   const [\n//     selectedStarts, \n//     setSelectedStars\n//   ] = useState(0);\n\n//   return <>\n//   {createArray(totalStars).map((n,i) => (\n//       <Star key={i} selected ={selectedStarts > i} onSelect={() => setSelectedStars(i+1)}/>\n//     )\n//   )}\n//   <p>{selectedStarts} of {totalStars}</p>\n\n//   </>\n// }\n\n// function App(){\n//   return <StarRating totalStars={10}/>\n// }\n\n// // -------------------------------- #4 Introducing useEffect , Working with dependency array \n// function App(){\n//   const [name, setName] = useState(\"Ilshin\");\n//   const [admin, setAdmin] = useState(false);\n//   useEffect(() =>{\n//     document.title = `Celebreate ${name}`;\n//     console.log(`Celeberate ${name}`);\n//   }, [name]);\n\n//   useEffect(()=>{\n//     console.log(`The user is: ${admin ? \"admin\" : \"not admin\"}`);\n//   },[admin])\n\n//   return(\n//     <section>\n//       <p>Congratulations {name}!</p>\n//       <button onClick={()=> setName(\"Shinny\")}>Change the winner</button>\n//       <p>{admin? \"Loogged in\" : \"not logged in\"}</p>\n//       <button onClick={() => setAdmin((admin) =>!admin)}>Login</button>\n//     </section>\n//   )\n// }\n\n// // -------------------------------- #5 Fetching data with useEffect \n// function App(){\n//   const [data, setData] = useState([]);\n//   useEffect(()=>{\n//     fetch(`https://api.github.com/users`)\n//     .then(response => response.json())\n//     .then(setData);\n//   },[]);\n\n//   if(data) {\n//     return (\n//       <div>\n//       <ul>\n//         {data.map((user) => (\n//           <li key={user.id}>{user.login}</li>\n//         ))}\n//       </ul>\n//       <button onClick={() => setData([])}>Remove Data</button>\n//       </div>\n//     )\n//   }\n\n//   return <p>No users</p>\n\n// }\n\n// // -------------------------------- #6 Handling complex state with useReducer\n\n// function App(){\n//   const [number, setNumber] = useReducer((number, newNumber)=> number + newNumber, 0)\n//   return <h1 onClick = {()=> setNumber(1)}>\n//    {number}\n//   </h1>\n// }\n\n\n// // // -------------------------------- #7 Refactoring useState to useReducer\n// function App(){\n//   const [checked, toggle] = useReducer(\n//     (checked) => !checked, false\n//   );\n//   return (\n//     <Fragment>\n//       <input \n//         type=\"checkbox\" \n//         value={checked}\n//         onChange={toggle}\n//         />\n\n//       <p>{checked ? \"checked\" : \"not checked\"}</p>\n//     </Fragment>\n//   )\n// }\n\n// // // -------------------------------- #8 dispatching actions with useReducer\n// const initialState = {\n//   message: \"Hi\"\n// }\n\n// function reducer(state, action){\n//   //state.message == \"Hi\"? state.message=\"Hi\": state.message=\"Hi\"\n//   switch(action.type){\n    \n//     case \"yell\":\n//       return{\n//         message : `HEY!! I JUST SAID ${state.message}`\n//       };\n//     case \"whisper\":\n//       return{\n//         message: `Excuse me I just said ${state.message}`\n//       };\n//     default:\n//       return {\n//         message: \"Say something\"\n//       };\n//   };\n// };\n\n// function App(){\n//   const [state, dispatch] = useReducer(\n//     reducer,\n//     initialState\n//   );\n\n//   return (\n//     <Fragment>\n//       <p>Message: {state.message}</p>\n//       <button onClick={() => dispatch({type: \"yell\"})}>YELL</button>\n//       <button onClick={() => dispatch({type: \"whisper\"})}>WHISPER</button>\n//     </Fragment>\n//   )\n// }\n\n// // -------------------------------- #9 Managing from inputs with useRef\n// function App(){\n//   const sound = useRef();\n//   const color = useRef();\n\n//   const submit = (e) =>{\n//     e.preventDefault();\n//     const soundVal = sound.current.value;\n//     const colorVal = color.current.value;\n//     alert(`${soundVal} sounds like ${colorVal}`);\n//     sound.current.value=\"\";\n//     color.current.value=\"\";\n//   }\n//   return(\n//     <form onSubmit={submit}>\n//       <input \n//         ref={sound}\n//         type=\"text\" \n//         placeholder=\"sound...\"/>\n//       <input \n//         ref={color}\n//         type=\"color\"/>\n//       <button>ADD</button>\n//     </form>\n//   )\n// }\n\n// // -------------------------------- #10 Creating controlled components with useState\nfunction App(){\n  const[sound, setSound] = useState(\"\");\n  const[color, setColor] = useState(\"#00000\");\n\n  const submit = (e) =>{\n    e.preventDefault();\n    const soundVal = sound.current.value;\n    const colorVal = color.current.value;\n    alert(`${soundVal} sounds like ${colorVal}`);\n    sound.current.value=\"\";\n    color.current.value=\"\";\n  }\n  return(\n    <form onSubmit={submit}>\n      <input \n        value ={sound}\n        type=\"text\" \n        placeholder=\"sound...\"/>\n      <input \n        ref={color}\n        type=\"color\"/>\n      <button>ADD</button>\n    </form>\n  )\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}